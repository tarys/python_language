#task_1--------------------------------------------------------
'''
Найдите индексы первого вхождения максимального элемента.
Выведите два числа: номер строки и номер столбца, в 
которых стоит наибольший элемент в двумерном массиве. 
Если таких элементов несколько, то выводится тот, у 
которого меньше номер строки, а если номера строк равны 
то тот, у которого меньше номер столбца.
Программа получает на вход размеры массива n и m, затем 
n строк по m чисел в каждой.
'''

n,m=[int(x) for x in input().split()]                                                                                                                                          
a=[[int(x) for x in input().split()] for i in range(n)]
r=max(a)
k=max(r)
u=0
for i in range(n):
    for j in range(m):
         if a[i][j]==k:  
             u=1
             break
    if u==1:
        break
print(i,j)

#--------------------------------------------------------------


#task_2--------------------------------------------------------
'''
Дано нечетное число n. Создайте двумерный массив из n?n 
элементов, заполнив его символами "." (каждый элемент массива 
является строкой из одного символа). Затем заполните символами 
"*" среднюю строку массива, средний столбец массива, главную
диагональ и побочную диагональ. В результате единицы в массиве 
должны образовывать изображение звездочки. Выведите полученный 
массив на экран, разделяя элементы массива пробелами.
'''

n=int(input())
j,t=int(n-1),int((n-1)/2)
a =[['.']*t+['*']+['.']*t for i in range(n)]
a[t]=['*']*n
for i in range(n):
    a[i][i]='*'
    a[j][i]='*'
    j-=1
for row in a:
    print(' '.join([str(elem) for elem in row]))

#--------------------------------------------------------------


#task_3--------------------------------------------------------
'''
Даны два числа n и m. Создайте двумерный массив размером n?m и 
заполните его символами "." и "*" в шахматном порядке. В левом 
верхнем углу должна стоять точка.
'''

n,m=[int(i) for i in input().split()]
for i in range(n):
    for j in range(m):
        if (i+j)%2==0:
            print(".",end=" ")
        else:
            print("*",end=" ")
    print()

#--------------------------------------------------------------


#task_4--------------------------------------------------------
'''
Дано число n. Создайте массив размером n?n и заполните его по 
следующему правилу. На главной диагонали должны быть записаны 
числа 0. На двух диагоналях, прилегающих к главной, числа 1. 
На следующих двух диагоналях числа 2, и т.д.
'''

n = int(input())
[print(' '.join([str(abs(i-n + j)) for i in range(n,0,-1)])) for j in range(n)]

#--------------------------------------------------------------


#task_5--------------------------------------------------------
'''
Дано число n. Создайте массив размером n?n и заполните его по 
следующему правилу: числа на диагонали, идущей из правого 
верхнего в левый нижний угол равны 1. Числа, стоящие выше этой 
диагонали, равны 0. Числа, стоящие ниже этой диагонали, равны 2.
Полученный массив выведите на экран. Числа в строке разделяйте 
одним пробелом.
'''

n=int(input())
a=[[0]*n for i in range(n)]
for i in range(n):
    a[i][n-i-1]=1
for i in range(n):
    for j in range(n-i,n):
        a[i][j]=2
for y in a:
    for element in y:
        print(element, end=' ')
    print()

#--------------------------------------------------------------


#task_6--------------------------------------------------------
'''
Дан двумерный массив и два числа: i и j. Поменяйте в массиве 
столбцы с номерами i и j и выведите результат. Программа 
получает на вход размеры массива n и m, затем элементы массива, 
затем числа i и j. Решение оформите в виде функции 
swap_columns(a, i, j).
'''

n,m=[int(s) for s in input().split()]
a=[[int(s) for s in input().split()] for i in range(n)]
i,j=[int(s) for s in input().split()]
for z in range(n):
    a[z][i],a[z][j]=a[z][j],a[z][i]
[print(' '.join([str(s) for s in y])) for y in a]

#--------------------------------------------------------------
