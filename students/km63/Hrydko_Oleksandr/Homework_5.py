# 5.Функції і рекурсія.

#task1----------------------------------------------------------— 
""" 
Даны четыре действительных числа: x1, y1, x2, y2. Напишите функцию distance(x1, y1, x2, y2), вычисляющая расстояние между точкой (x1,y1) и (x2,y2). Считайте четыре действительных числа и выведите результат работы этой функции.
""" 
x1=float(input())
y1=float(input())
x2=float(input())
y2=float(input())
def distance(x1, y1, x2, y2):
    d=(((x2-x1)**2)+((y2-y1)**2))**(1/2)
    return d
print(distance(x1,y1,x2,y2))

#---------------------------------------------------------------— 


#task2----------------------------------------------------------— 
""" 
Дано действительное положительное число a и целоe число n.
Вычислите an. Решение оформите в виде функции power(a, n).

""" 
def power(a, n):
    res = 1
    for i in range(abs(n)):
        res *= a
    if n >= 0:
        return res
    else:
        return 1 / res
a=float(input())
n=int(input())
print(power(a,n))
#---------------------------------------------------------------— 


#task3----------------------------------------------------------— 
""" 
Дано действительное положительное число a и целое неотрицательное число n. Вычислите an не используя циклы, возведение в степень через ** и функцию math.pow(), а используя рекуррентное соотношение an=a⋅an-1.""" 
x = int(input())
def power(a, n):
    res = 1
    for i in range(abs(n)):
        res *= a
    if n >= 0:
        return res
    else:
        return 1 / res
a=float(input())
n=int(input())
print(power(a,n))    print(y)

#---------------------------------------------------------------— 


#task4----------------------------------------------------------— 
""" 
Напишите функцию fib(n), которая по данному целому неотрицательному n возвращает n-e число Фибоначчи. В этой задаче нельзя использовать циклы — используйте рекурсию.
""" 
def fib(n):
    if n == 1 or n == 2:
        return 1
    else:
        return fib(n - 1) + fib(n - 2)

print(fib(int(input())))
#---------------------------------------------------------------— 
