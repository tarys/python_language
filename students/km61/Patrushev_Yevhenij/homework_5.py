# task1------------------------------------------------------------
"""
Даны четыре действительных числа: x1, y1, x2, y2. Напишите функцию distance(x1, y1, x2, y2), вычисляющая
расстояние между точкой (x1,y1) и (x2,y2). Считайте четыре действительных числа и выведите результат работы этой функции.
Если вы не знаете, как решить эту задачу, то вы, возможно, не изучали в школе теорему Пифагора.
"""

# distance between dots
from math import sqrt


def distance(x1, y1, x2, y2):
    result = sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)
    return result


x1 = float(input())
y1 = float(input())
x2 = float(input())
y2 = float(input())
print(distance(x1, y1, x2, y2))
# -----------------------------------------------------------------


# task2------------------------------------------------------------
"""
Дано действительное положительное число a и целоe число n.
Вычислите a^n. Решение оформите в виде функции power(a, n).
Стандартной функцией возведения в степень пользоваться нельзя.
"""


# power of 'a'
def power(a, n):
    my_power = 1
    for i in range(abs(n)):
        my_power *= a
    if n >= 0:
        return my_power
    else:
        return (1 / my_power)


a = float(input())
n = int(input())
print(power(a, n))
# -----------------------------------------------------------------


# task3------------------------------------------------------------
"""
Дано действительное положительное число a и целое неотрицательное число n. Вычислите an не используя циклы,
возведение в степень через ** и функцию math.pow(), а используя рекуррентное соотношение an=a⋅an-1.
Решение оформите в виде функции power(a, n).
"""


# power of 'a'
def power(a, n):
    if n == 0:
        return 1
    else:
        my_power = a * power(a, n - 1)
        return my_power


a = float(input())
n = float(input())
print(power(a, n))
# -----------------------------------------------------------------


# task4------------------------------------------------------------
'''
Напишите функцию fib(n), которая по данному целому неотрицательному n возвращает n-e число Фибоначчи.
В этой задаче нельзя использовать циклы — используйте рекурсию.
'''


# program Фибоначчи
def fab(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        number = fab(n - 1) + fab(n - 2)
        return number


print(fab(int(input())))
