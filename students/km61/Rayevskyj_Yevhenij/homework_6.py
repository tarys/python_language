#task1------------------------------------------------------------
"""
Выведите все элементы списка с четными индексами (то есть A[0], A[2], A[4], ...).
"""



a = [int(i) for i in input().split()]
    
def elements(a, i):
    if i >= len(a):
        return
    print(a[i])
    elements(a, i + 2)
    
elements(a, 0)

#-----------------------------------------------------------------


#task2------------------------------------------------------------
"""
Выведите все четные элементы списка. При этом используйте цикл for, перебирающий элементы списка, а не их индексы!
"""



a = [int(i) for i in input().split()]
    
def elements(a, i):
    if i >= len(a):
        return
    if a[i] % 2 == 0:
        print(a[i])
    elements(a, i + 1)
    
elements(a, 0)

#-----------------------------------------------------------------


#task3------------------------------------------------------------
"""
Дан список чисел. Выведите все элементы списка, которые больше предыдущего элемента.
"""



a = [int(i) for i in input().split()]

def elements(a, i):
    if i >= len(a):
        return
    if i != 0 and a[i] > a[i - 1]:
        print(a[i])
    elements(a, i + 1)
    
elements(a, 0)

#-----------------------------------------------------------------


#task4------------------------------------------------------------
"""
Дан список чисел. Если в нем есть два соседних элемента одного знака, выведите эти числа. Если соседних элементов одного знака нет — не выводите ничего. Если таких пар соседей несколько — выведите первую пару.
"""



a = [int(i) for i in input().split()]

def elements(a, i):
    if i >= len(a):
        return
    if i != 0 and a[i] * a[i - 1] > 0:
        print(a[i - 1])
        print(a[i])
        return
    elements(a, i + 1)
    
elements(a, 0)

#-----------------------------------------------------------------


#task5------------------------------------------------------------
"""
Дан список чисел. Определите, сколько в этом списке элементов, которые больше двух своих соседей, и выведите количество таких элементов. Крайние элементы списка никогда не учитываются, поскольку у них недостаточно соседей.
"""



a = [int(i) for i in input().split()]

def elements(a, i):
    counter = 0
    if i >= len(a) - 1:
        return counter
    if a[i] > a[i - 1] and a[i] > a[i + 1]:
        counter += 1
    return counter + elements(a, i + 1)
    
print(elements(a, 1))

#-----------------------------------------------------------------


#task6------------------------------------------------------------
"""
Дан список чисел. Выведите значение наибольшего элемента в списке, а затем индекс этого элемента в списке. Если наибольших элементов несколько, выведите индекс первого из них.
"""



a = [int(i) for i in input().split()]
index = 0

def elements(a, max, index, i):
    counter = 0
    if i >= len(a):
        return max, index
    if a[i] > max:
        max = a[i]
        index = i
    return elements(a, max, index, i + 1)
    
print(' '.join([str(i) for i in elements(a, a[0], 0, 1)]))

#-----------------------------------------------------------------


#task7------------------------------------------------------------
"""
Петя перешёл в другую школу. На уроке физкультуры ему понадобилось определить своё место в строю. Помогите ему это сделать.
Программа получает на вход невозрастающую последовательность натуральных чисел, означающих рост каждого человека в строю. После этого вводится число X – рост Пети. Все числа во входных данных натуральные и не превышают 200.

Выведите номер, под которым Петя должен встать в строй. Если в строю есть люди с одинаковым ростом, таким же, как у Пети, то он должен встать после них.
"""



a = [int(i) for i in input().split()]
x = int(input())

def elements(a, x, index, i):
    counter = 0
    if i >= len(a):
        return len(a) + 1
    if a[i] < x:
        index = i + 1
        return index
    return elements(a, x, index, i + 1)
    
print(elements(a, x, 1, 0))

#-----------------------------------------------------------------


#task8------------------------------------------------------------
"""
Дан список, упорядоченный по неубыванию элементов в нем. Определите, сколько в нем различных элементов.
"""



a = [int(i) for i in input().split()]

def elements(a, count, i):
    if i >= len(a) - 1:
        return count
    if a[i] != a[i+1]:
        count += 1
    return elements(a, count, i + 1)
    
print(elements(a, 1, 0))

#-----------------------------------------------------------------


#task9------------------------------------------------------------
"""
Переставьте соседние элементы списка (A[0] c A[1], A[2] c A[3] и т. д.). Если элементов нечетное число, то последний элемент остается на своем месте.
"""



a = [int(i) for i in input().split()]

def elements(a, i):
    if i >= len(a):
        return
    a[i], a[i - 1] = a[i - 1], a[i]
    elements(a, i + 2)
    
elements(a, 1)
print(' '.join([str(i) for i in a]))

#-----------------------------------------------------------------


#task10-----------------------------------------------------------
"""
В списке все элементы различны. Поменяйте местами минимальный и максимальный элемент этого списка.
"""



a = [int(i) for i in input().split()]

def elements(a, min_el, max_el, i):
    if i >= len(a):
        return min_el, max_el
    if a[i] > a[max_el]:
        max_el = i
    if a[i] < a[min_el]:
        min_el = i
    
    return elements(a, min_el, max_el, i + 1)
    
min_max = elements(a, 0, 0, 0)
a[min_max[0]], a[min_max[1]] = a[min_max[1]], a[min_max[0]]
print(' '.join([str(i) for i in a]))

#-----------------------------------------------------------------


#task11-----------------------------------------------------------
"""
Дан список из чисел и индекс элемента в списке k. Удалите из списка элемент с индексом k, сдвинув влево все элементы, стоящие правее элемента с индексом k.
Программа получает на вход список, затем число k. Программа сдвигает все элементы, а после этого удаляет последний элемент списка при помощи метода pop() без параметров.

Программа должна осуществлять сдвиг непосредственно в списке, а не делать это при выводе элементов. Также нельзя использовать дополнительный список. Также не следует использовать метод pop(k) с параметром.
"""



new_list = [int(i) for i in input().split()] 
remove_index = int(input()) 


def remove_index_recursion(list, i): 
    if i >= len(list): 
        list.pop() 
        print(' '.join([str(i) for i in list])) 
        return 
    list[i], list[i - 1] = list[i - 1], list[i] 
    remove_index_recursion(list, i + 1) 


remove_index_recursion(new_list, remove_index + 1)

#-----------------------------------------------------------------


#task12-----------------------------------------------------------
"""
Дан список целых чисел, число k и значение C. Необходимо вставить в список на позицию с индексом k элемент, равный C, сдвинув все элементы, имевшие индекс не менее k, вправо.
Посколько при этом количество элементов в списке увеличивается, после считывания списка в его конец нужно будет добавить новый элемент, используя метод append.

Вставку необходимо осуществлять уже в считанном списке, не делая этого при выводе и не создавая дополнительного списка.
"""



a = [int(i) for i in input().split()]
k, temp = [int(i) for i in input().split()]

def elements(a, temp, i):
    if i >= len(a):
        a.append(temp) 
        return
    a[i], temp = temp, a[i]
    elements(a, temp, i + 1)

elements(a, temp, k)
print(' '.join([str(i) for i in a]))

#-----------------------------------------------------------------


#task13-----------------------------------------------------------
"""
Дан список чисел. Посчитайте, сколько в нем пар элементов, равных друг другу. Считается, что любые два элемента, равные друг другу образуют одну пару, которую необходимо посчитать.
"""



a = [int(i) for i in input().split()]

def elements(a, count, i):
    if i >= len(a):
        return count
    count = elements_inner(a, count, a[i], i + 1)
    return elements(a, count, i + 1)
    
def elements_inner(a, count, element, j):
    if j >= len(a):
        return count
    if a[j] == element:
        count += 1
    return elements_inner(a, count, element, j + 1)    
    
print(elements(a, 0, 0))

#-----------------------------------------------------------------


#task14-----------------------------------------------------------
"""
Дан список. Выведите те его элементы, которые встречаются в списке только один раз. Элементы нужно выводить в том порядке, в котором они встречаются в списке.
"""



a = [int(i) for i in input().split()]

def elements(a, count, i):
    if i >= len(a):
        return count
    if once(a, i, 0):
        print(a[i])
    return elements(a, count, i + 1)
    
def once(a, element, j):
    if j >= len(a):
        return True
    if a[j] == a[element] and j != element:
        return False
    return once(a, element, j + 1)    
    
elements(a, 0, 0)

#-----------------------------------------------------------------


#task15-----------------------------------------------------------
"""
N кеглей выставили в один ряд, занумеровав их слева направо числами от 1 до N. Затем по этому ряду бросили K шаров, при этом i-й шар сбил все кегли с номерами от li до ri включительно. Определите, какие кегли остались стоять на месте.
Программа получает на вход количество кеглей N и количество бросков K. Далее идет K пар чисел li, ri, при этом 1? li? ri? N.

Программа должна вывести последовательность из N символов, где j-й символ есть “I”, если j-я кегля осталась стоять, или “.”, если j-я кегля была сбита.
"""



n, k = [int(i) for i in input().split()]
throws = [[int(i) for i in input().split()] for j in range(k)]

def elements(throws, i):
    if i >= n + 1:
        return
    if standing(throws, i, 0):
        print('I', end = '')
    else:
        print('.', end = '')
    elements(throws, i + 1)
    
def standing(throws, i, j):
    if j >= len(throws):
        return True
    if i >= throws[j][0] and i <= throws[j][1]:
        return False
    return standing(throws, i, j + 1)    
    
elements(throws, 1)

#-----------------------------------------------------------------


#task16-----------------------------------------------------------
"""
Известно, что на доске 8?8 можно расставить 8 ферзей так, чтобы они не били друг друга. Вам дана расстановка 8 ферзей на доске, определите, есть ли среди них пара бьющих друг друга.
Программа получает на вход восемь пар чисел, каждое число от 1 до 8 — координаты 8 ферзей. Если ферзи не бьют друг друга, выведите слово NO, иначе выведите YES.
"""



queens = [[int(i) for i in input().split()] for j in range(8)]

def elements(queens, i):
    if i >= len(queens):
        return False
    if beat(queens, i, 0):
        return True
    return elements(queens, i + 1)
    
def beat(queens, i, j):
    if j >= len(queens):
        return False
    x1 = queens[i][0]
    y1 = queens[i][1]
    x2 = queens[j][0]
    y2 = queens[j][1]
    if (x1 == x2 or y1 == y2 or abs(x1-x2) == abs(y1-y2)) and i != j:
        return True
    return beat(queens, i, j + 1)    

if elements(queens, 0):
    print('YES')
else:
    print('NO')

#-----------------------------------------------------------------

