#task1------------------------------------------------------------
"""
Даны четыре действительных числа: x1, y1, x2, y2. Напишите функцию distance(x1, y1, x2, y2), вычисляющая расстояние между точкой (x1,y1) и (x2,y2). 
Считайте четыре действительных числа и выведите результат работы этой функции. 
"""

import math

x1=float(input())

y1=float(input())

x2=float(input())

y2=float(input())

def long(x1,y1,x2,y2):
    
	l=math.sqrt((x2 - x1)**2 + (y2 - y1)**2)
    
	return l

print(long(x1,y1,x2,y2)) 

#-----------------------------------------------------------------
#task2------------------------------------------------------------
"""
Дано действительное положительное число a и целоe число n. 
Вычислите an. Решение оформите в виде функции power(a, n). 
"""


a=float(input())

n=int(input())

def power(a,n):
    
	add=1
    
	for i in range(abs(n)):
        
	add*=a
    
	if n>=0:
        
	return add
    
	else:
        
	return 1/add
power= power(a,n)    

print(power)   

#-----------------------------------------------------------------

#task3------------------------------------------------------------
"""
Дано действительное положительное число a и целое неотрицательное число n. Вычислите an не используя циклы, возведение в степень через ** и функцию math.pow(), 
а используя рекуррентное соотношение an=a?an-1. 
"""




a=float(input())

n=int(input())

def power(a,n):
    
	if n==0:
        
		return 1
   
	else:
        
		c=1
        
		c*=a*power(a, n - 1)
       
		return c

print(power(a,n))
#-----------------------------------------------------------------

#task4------------------------------------------------------------
"""
Напишите функцию fib(n), которая по данному целому неотрицательному n возвращает n-e число Фибоначчи. В этой задаче нельзя использовать циклы — используйте рекурсию. 
"""


n = int(input())

def fib(n):
    
	if n == 0:
        
		return 0
    
	elif n == 1 or n == 2:
        
		return 1
    
	else:
  
     		return fib(n - 2) + fib(n - 1)

fibonachi = fib(n)

print(fibonachi)

#-----------------------------------------------------------------

    