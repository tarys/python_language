#task1------------------------------------------------------------
"""
Даны четыре действительных числа: x1, y1, x2, y2. Напишите функцию distance(x1, y1, x2, y2),
вычисляющая расстояние между точкой (x1,y1) и (x2,y2).
Считайте четыре действительных числа и выведите результат работы этой функции. 
"""



#Длина отрезка
def distance(x1,y1,x2,y2):
    res=((x1-x2)**2+(y1-y2)**2)**(1/2)
    return res
x1=float(input())
y1=float(input())
x2=float(input())
y2=float(input())
print(distance(x1,y1,x2,y2))

	
	
#-----------------------------------------------------------------


#task2------------------------------------------------------------
"""
Дано действительное положительное число a и целоe число n.
Вычислите an. Решение оформите в виде функции power(a, n).
Стандартной функцией возведения в степень пользоваться нельзя. 
"""



#Отрицательная степень
def power(a,n):
    if n==0:
        return 1
    elif n>0:
        return a*power(a,n-1)
    else:
        return 1/power(a,-n)
        
float_number=float(input())
integer_number=int(input())
print(power(float_number,integer_number))


	
	
#-----------------------------------------------------------------


#task3------------------------------------------------------------
"""
Дано действительное положительное число a и целое неотрицательное число n.
Вычислите an не используя циклы, возведение в степень через ** и функцию math.pow(),
а используя рекуррентное соотношение an=a?an-1.

Решение оформите в виде функции power(a, n). 
"""



#Возведение в степень
def power(a,n):
    if n==0:
        return 1
    elif n>0:
        return a*power(a,n-1)
    else:
        return 1/power(a,-n)
        
float_number=float(input())
integer_number=int(input())
print(power(float_number,integer_number))

	
	
	
#-----------------------------------------------------------------


#task4------------------------------------------------------------
"""
Напишите функцию fib(n), которая по данному целому неотрицательному n возвращает n-e число Фибоначчи.
В этой задаче нельзя использовать циклы — используйте рекурсию. 
"""


#Числа Фибоначчи
def fib(n):
    if n==0:
        return 0
    elif n==1:
        return 1
    else:
        return fib(n-1)+fib(n-2)
print(fib(int(input())))

	
	
#-----------------------------------------------------------------

