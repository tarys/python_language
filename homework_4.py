# -*- coding: utf-8 -*-

#task1------------------------------------------------------------
"""
Задача «Список квадратов»
По данному целому числу N распечатайте все квадраты натуральных чисел, не превосходящие N, в порядке возрастания.
""" 
import math 
n = int(input())
limit = math.floor(math.sqrt(n))
for i in range(1, limit + 1):
    while i**2 <= n:
        print(i**2, end = " ")
        break
#-----------------------------------------------------------------


#task2------------------------------------------------------------
"""
Задача «Минимальный делитель»
Дано целое число, не меньшее 2. Выведите его наименьший натуральный делитель, отличный от 1.
""" 
n = int(input())
i = 2
while n != 1 :
    if n % i == 0:
        print(i)
        break
    i+= 1
#-----------------------------------------------------------------


#task3------------------------------------------------------------
"""
Задача «Степень двойки»
По данному натуральному числу N найдите наибольшую целую степень двойки, не превосходящую N. 
Выведите показатель степени и саму степень.
""" 
n = int(input()) 
power = 2 
counter = 1 
while power <= n: 
    power*= 2 
    counter += 1 
print(counter - 1, power // 2)
#----------------------------------------------------------------- 


#task4------------------------------------------------------------
"""
Задача «Утренняя пробежка»
В первый день спортсмен пробежал x километров, а затем он каждый день увеличивал пробег на 10% от предыдущего значения. 
По данному числу y определите номер дня, на который пробег спортсмена составит не менее y километров.
""" 
x = float(input())
y = float(input())
p = 0.1
counter = 1
while x < y:
    x += x * p
    counter += 1
print(counter)
#-----------------------------------------------------------------


#task5------------------------------------------------------------
"""
Задача «Банковские проценты»
Вклад в банке составляет x рублей. Ежегодно он увеличивается на p процентов, после чего дробная часть копеек отбрасывается. Определите, через сколько лет вклад составит не менее y рублей.
Выражение «дробная часть копеек отбрасывается» означает, что если у вас оказалось 123.4567 рублей, т. е. 123 рубля и 45.67 копеек, 
то после округления у вас получится 123 рубля и 45 копеек, т.е. 123.45 рублей.
Программа получает на вход три натуральных числа: x, p, y и должна вывести одно целое число.
""" 
x = int(input())
p = int(input())
y = int(input())
counter = 0
while x < y :
  x += x * p / 100 
  x = ( x*100 ) // 1 / 100
  counter += 1
print(counter)
#-----------------------------------------------------------------


#task6------------------------------------------------------------
"""
Задача «Длина последовательности»
Программа получает на вход последовательность целых неотрицательных чисел, каждое число записано в отдельной строке. 
Последовательность завершается числом 0, при считывании которого программа должна закончить свою работу и вывести количество членов последовательности (не считая завершающего числа 0). 
Числа, следующие за числом 0, считывать не нужно.
""" 
n = int(input())
num = 0
i = 0
while n != 0:
    n = int(input())
    i+= 1
    while n == 0:
        num = i
        break
    continue
print(num)
#-----------------------------------------------------------------


#task7------------------------------------------------------------
"""
Задача «Сумма последовательности»
Определите сумму всех элементов последовательности, завершающейся числом 0. 
В этой и во всех следующих задачах числа, следующие за первым нулем, учитывать не нужно.
""" 
sum = 0
number = int(input())
while number != 0:
    sum += number
    number = int(input())
print(sum)
#-----------------------------------------------------------------


#task8------------------------------------------------------------
"""
Задача «Среднее значение последовательности»
Определите среднее значение всех элементов последовательности, завершающейся числом 0.
""" 
sum = 0
number = int(input())
counter = 0
while number != 0:
    sum += number
    number = int(input())
    counter += 1
print(sum / counter)
#-----------------------------------------------------------------


#task9------------------------------------------------------------
"""
Задача «Максимум последовательности»
Последовательность состоит из натуральных чисел и завершается числом 0. 
Определите значение наибольшего элемента последовательности.
""" 
number = int(input())
max = 0 
while number != 0:
	if number > max:
	  max = number
	number = int(input())
print(max)
#-----------------------------------------------------------------


#task10------------------------------------------------------------
"""
Задача «Индекс максимума последовательности»
Последовательность состоит из натуральных чисел и завершается числом 0. Определите индекс наибольшего элемента последовательности. 
Если наибольших элементов несколько, выведите индекс первого из них. Нумерация элементов начинается с нуля.
""" 
number = int(input())
index = 0
index_of_max = 0 
max = 0
while number != 0:
    index += 1
    if number > max:
        max, index_of_max = number, index - 1
    number = int(input())
print(index_of_max)
#-----------------------------------------------------------------


#task11------------------------------------------------------------
"""
Задача «Количество четных элементов последовательности»
Определите количество четных элементов в последовательности, завершающейся числом 0.
""" 
number = int(input())
counter = 0 
while number != 0:
    if number % 2 == 0:
        counter += 1
    number = int(input())
print(counter)
#-----------------------------------------------------------------


#task12------------------------------------------------------------
"""
Задача «Количество элементов, которые больше предыдущего»
Последовательность состоит из натуральных чисел и завершается числом 0. Определите, сколько элементов этой последовательности больше предыдущего элемента.
""" 
number = int(input())
counter = 0
while number != 0:
    next_number = int(input())
    if next_number > number:
        counter += 1
    number = next_number
print(counter)
#-----------------------------------------------------------------


#task13------------------------------------------------------------
"""
Задача «Второй максимум»
Последовательность состоит из различных натуральных чисел и завершается числом 0. 
Определите значение второго по величине элемента в этой последовательности. Гарантируется, что в последовательности есть хотя бы два элемента.
""" 
first_max = int(input())
second_max = int(input())
if second_max > first_max:
    first_max, second_max = second_max, first_max
number = int(input())
while number != 0:
    if number > first_max:
        first_max, second_max = number, first_max
    elif number > second_max:
        second_max = number
    number = int(input())
print(second_max)
#-----------------------------------------------------------------


#task14------------------------------------------------------------
"""
Задача «Количество элементов, равных максимуму»
Последовательность состоит из натуральных чисел и завершается числом 0. Определите, сколько элементов этой последовательности равны ее наибольшему элементу.
""" 
max = 0
nmax = 0
element = 1
while element != 0:
    element = int(input())
    if element > max:
        max, nmax = element, 1
    elif element == max:
        nmax += 1        
print(nmax)
#-----------------------------------------------------------------


#task15------------------------------------------------------------
"""
Задача «Числа Фибоначчи»
Последовательность Фибоначчи определяется так:
φ0 = 0,  φ1 = 1,  φn = φn−1 + φn−2.
По данному числу n определите n-е число Фибоначчи φn.
Эту задачу можно решать и циклом for.
""" 
fibonaci_current = 0
fibonaci_next = 1
for i in range(1, int(input()) + 1):
    fibonaci_current, fibonaci_next = fibonaci_next, fibonaci_next + fibonaci_current
print(fibonaci_current)
#-----------------------------------------------------------------


#task16------------------------------------------------------------
"""
Задача «Номер числа Фибоначчи»
Дано натуральное число A. Определите, каким по счету числом Фибоначчи оно является, то есть выведите такое число n, что φn = A. 
Если А не является числом Фибоначчи, выведите число -1.
""" 
A = int(input())
a, b = 0, 1
i = 1
while b < A:
    a, b = b, a + b
    i += 1
if b == A:
    print(i)
else:
    print(-1)
#-----------------------------------------------------------------


#task17------------------------------------------------------------
"""
Задача «Максимальное число идущих подряд равных элементов»
Дана последовательность натуральных чисел, завершающаяся числом 0. Определите, какое наибольшее число подряд идущих элементов этой последовательности равны друг другу.
""" 
n = int(input())
count, max = 1, 0
while n != 0:
    n_next = int(input())
    if n_next != n and count > max:
        max, count = count , 1
    elif n_next != n:
        count = 1
    else:
        count += 1
    n = n_next
print(max)
#-----------------------------------------------------------------


#task18------------------------------------------------------------
"""
Задача «Стандартное отклонение»
Дана последовательность натуральных чисел x1x1, x2x2, ..., xnxn. Стандартным отклонением называется величина
σ=(x1−s)2+(x2−s)2+…+(xn−s)2n−1−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−√
σ=(x1−s)2+(x2−s)2+…+(xn−s)2n−1
где s=x1+x2+…+xnns=x1+x2+…+xnn — среднее арифметическое последовательности.
Определите стандартное отклонение для данной последовательности натуральных чисел, завершающейся числом 0.
""" 
import math
x = int(input())
n, sum, square_sum = 0, 0, 0
while x != 0:
    sum += x
    n += 1
    square_sum += x * x
    x = int(input())
else:
    sum /= n
    sigma=math.sqrt((square_sum - sum * sum * n) / (n - 1))
    print(sigma)
#-----------------------------------------------------------------    